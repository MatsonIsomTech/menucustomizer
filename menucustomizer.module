<?php

use Drupal\Core\Menu\DefaultMenuLinkTreeManipulators;
/**
 * Implements hook_menu_links_discovered_alter().
 */
/* -- might be useful in the future?
function menucustomizer_menu_links_discovered_alter(&$links) {
}
*/

function menucustomizer_preprocess_page(&$variables)
{
    $current_path = \Drupal::service('path.current')->getPath();

    if (strpos($current_path, '/admin') === 0) {
      return;
    }

    $menu_name = 'main';
    $parameters = new \Drupal\Core\Menu\MenuTreeParameters();
    $parameters->onlyEnabledLinks();
    $tree = \Drupal::menuTree()->load($menu_name, $parameters);

    $newTree = modify_child_links($tree);
    if ($newTree ?? false) {
        $newMenu = \Drupal::menuTree()->build($newTree);
        $variables['page']['sidebar_first']['glenn_theme_mainmenu_2'] = $newMenu;
    }
}


function modify_child_links(&$tree)
{
    $activeTrailService = \Drupal::service('menu.active_trail');

    $activeLink = $activeTrailService->getActiveLink() ?? null;


    if (!$activeLink) {
        return null;
    }

    $menuLinkDefinition = $activeLink->getPluginDefinition();

    $parentLinkId = $menuLinkDefinition['parent'] ?? null;

    if (!$parentLinkId) {
        return null;
    }

    // Check top level of the tree for parent.
    $parentLink = $tree[$parentLinkId] ?? false;

    // If the parent is not in the top level then we have to dig into the tree and subtrees.
    if (!$parentLink) {
        $parentLink = findMenuLinkTreeElement($tree, $parentLinkId);
    }

    $currentLink = $parentLink->subtree[$menuLinkDefinition['id']];
    if (isset($currentLink->subtree)) {
        if (!empty($currentLink->subtree)) {
            // Don't override current links subtree if it has one.
            return $currentLink->subtree;
        }
        return $parentLink->subtree ?? null;
    }
    return null;
}


function findMenuLinkTreeElement(array $tree, $parentLinkId)
{
    // Step into the first element of the tree.
    foreach ($tree as $element) {
        if ($element->link->getPluginId() == $parentLinkId) {
            return $element;
        }
        // If it has a subtree step into that.
        if (!empty($element->subtree)) {
            $foundElement = findMenuLinkTreeElement($element->subtree, $parentLinkId);
            if ($foundElement) {
                return $foundElement;
            }
        }
    }

    return null;
}

